import net.corda.plugins.Cordform

buildscript {
    ext.java_version = '1.8'
    ext.kotlin_version = '1.1.51'
    ext.junit_version = '5.0.0'
    ext.junit_gradle_plugin_version = '1.0.0'
    ext.corda_release_version = '1.0.0'
    ext.corda_plugins_version = '1.1.1'
    ext.quasar_version = '0.7.9'
    ext.graphstream_version = '1.3'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_gradle_plugin_version"
//        CORDA dependencies
        classpath "net.corda.plugins:publish-utils:$corda_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_plugins_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'idea'

allprojects {

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/exposed' }
        maven { url 'https://jitpack.io' }
    }

    apply plugin: 'kotlin'
    apply plugin: 'idea'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'net.corda.plugins.cordformation'
    apply plugin: 'net.corda.plugins.quasar-utils'
    apply plugin: 'net.corda.plugins.publish-utils'

    sourceCompatibility = java_version

    compileKotlin {
        kotlinOptions.jvmTarget = java_version
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = java_version
    }

    junitPlatform {
        // platformVersion '1.0.0'
        filters {
            engines {
                // include 'junit-jupiter', 'junit-vintage'
                // exclude 'custom-engine'
            }
            tags {
                // include 'fast'
                exclude 'slow'
            }
            // includeClassNamePattern '.*Test'
        }
        // enableStandardTestTask true
        // reportsDir file('build/test-results/junit-platform') // this is the default
    }

    dependencies {

        testCompile("org.junit.jupiter:junit-jupiter-api:$junit_version")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit_version")
    }
}

subprojects { it ->

    idea {
        module {
            downloadJavadoc = true // defaults to false
            downloadSources = true
        }
    }
    sourceSets {
        main {
            resources {
                srcDir "../config/dev"
            }
        }
        test {
            resources {
                srcDir "../config/test"
            }
        }
    }
    dependencies {

        compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"

//        Test
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
}

dependencies {
    cordapp project(":shared")
    cordapp project(":buyer")
    cordapp project(":buyer-api")
    cordapp project(":seller")
    cordapp project(":rate-provider")
    cordapp project(":rate-provider-api")

    cordapp "net.corda:corda-finance:$corda_release_version"

    cordaRuntime "net.corda:corda:$corda_release_version"
}

task deployNodes(type: Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    networkMap "O=R3cev,OU=corda,L=London,C=GB"
    node {
        name "O=R3cev,OU=corda,L=London,C=GB"
        advertisedServices = ["corda.notary.simple"]
//        advertisedServices = ["corda.notary.validating"]
        p2pPort 10002
        rpcPort 10003
        cordapps = ["net.corda.examples.fx:shared:1.0", "net.corda:corda-finance:1.0.0"]
//        cordapps = ["net.corda.examples.fx:shared:1.0"]
    }
    node {
        name "O=Buyer,L=London,C=GB"
        advertisedServices = []
        p2pPort 10005
        rpcPort 10006
        cordapps = ["net.corda.examples.fx:shared:1.0", "net.corda.examples.fx:rate-provider-api:1.0", "net.corda.examples.fx:buyer-api:1.0", "net.corda.examples.fx:buyer:1.0", "net.corda:corda-finance:1.0.0"]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
//        rpcUsers = [[user: "user1", "password": "test", "permissions": ["StartFlow.net.corda.examples.fx.buyer.BuyCurrencyFlow", "StartFlow.net.corda.examples.fx.shared.flows.IssueCashFlow", "StartFlow.net.corda.examples.fx.buyer.ExposeExchangeRateFlow"]]]
    }
    node {
        name "O=Seller,L=New York,C=US"
        advertisedServices = ["net.corda.examples.fx.shared.services.sellCash"]
        p2pPort 10008
        rpcPort 10009
        cordapps = ["net.corda.examples.fx:shared:1.0", "net.corda.examples.fx:rate-provider-api:1.0", "net.corda.examples.fx:buyer-api:1.0", "net.corda.examples.fx:seller:1.0", "net.corda:corda-finance:1.0.0"]
        rpcUsers = [[user: "user1", "password": "test", "permissions": []]]
    }
    node {
        name "O=Rate-Provider,L=Austin,C=US"
        advertisedServices = ["fx.rate_provider"]
        p2pPort 10011
        rpcPort 10012
        cordapps = ["net.corda.examples.fx:shared:1.0", "net.corda.examples.fx:rate-provider-api:1.0", "net.corda.examples.fx:rate-provider:1.0", "net.corda:corda-finance:1.0.0"]
        rpcUsers = [[user: "user1", "password": "test", "permissions": []]]
    }
}